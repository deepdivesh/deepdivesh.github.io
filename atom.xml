<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Hrvoje Šimić</title>
 <link href="http://shime.github.io/atom.xml" rel="self"/>
 <link href="http://shime.github.io/"/>
 <updated>2014-12-29T11:37:52+01:00</updated>
 <id>http://shime.github.io</id>
 <author>
   <name>Hrvoje Šimić</name>
   <email>shime.ferovac@gmail.com</email>
 </author>

 
 <entry>
   <title>Headless testing of Ember apps with Gulp and Jasmine</title>
   <link href="http://shime.github.io/headless-testing-of-ember-apps-with-gulp-and-jasmine"/>
   <updated>2014-08-28T00:00:00+02:00</updated>
   <id>http://shime.github.io/headless-testing-of-ember-apps-with-gulp-and-jasmine</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: use &lt;a href=&quot;http://karma-runner.github.io/0.12/index.html&quot;&gt;Karma&lt;/a&gt; as a test runner for your JS apps. It&amp;#39;s great because it adds DOM support without any effort and you need DOM support when you&amp;#39;re testing browser apps.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;First of all - I love &lt;a href=&quot;http://jasmine.github.io/&quot;&gt;Jasmine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s a terrific testing framework. Maybe I&amp;#39;m biased because I&amp;#39;m a Ruby developer deep down, we Rubyists love expressiveness, but I love how readable test suites it produces.&lt;/p&gt;

&lt;p&gt;Secondly, I love &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt; because it means I can run JS tests without firing my browser. That is enough when you&amp;#39;re working on projects that are okay with &lt;em&gt;modern browser support&lt;/em&gt; and that&amp;#39;s usually the case right now, I hope. When that&amp;#39;s not the case you&amp;#39;ll going to need cross-browser tests which are not going to be discussed in this blog post, but they will be addressed soon in one of the future posts.&lt;/p&gt;

&lt;p&gt;Thirdly, I love &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt; and I think it&amp;#39;s way better than Grunt. Again, I might be biased - I value expressiveness and I&amp;#39;m also amazed by Node.js and it&amp;#39;s most valuable feature - streams.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Having said all this, it&amp;#39;s time to test this Ember app.&lt;/p&gt;

&lt;p&gt;When you try to setup your Ember app for testing with something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;div id=&amp;quot;ember-testing-container&amp;quot;&amp;gt;&amp;lt;div id=&amp;quot;ember-testing&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;#39;ll receive this error message:
&lt;code&gt;
document is not defined
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ember requires DOM to operate and using the aforementioned toolset only enables simple JS testing. Jasmine doesn&amp;#39;t have the concept of &lt;em&gt;document&lt;/em&gt; baked in.&lt;/p&gt;

&lt;h2&gt;the wrong way&lt;/h2&gt;

&lt;p&gt;The first solution would probably be adding the &lt;a href=&quot;https://github.com/tmpvar/jsdom&quot;&gt;jsdom&lt;/a&gt; which is basically a DOM implementation in pure JavaScript. Seems crazy, right? It is.&lt;/p&gt;

&lt;p&gt;Suddenly we have to add a dependency to Jasmine and the only way to do that is to add the concept of RequireJS. Immediately we think of &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; which is cool, but it also seems weird in the same time. So we now have weirdness squared. This generates a lot of FUD and it&amp;#39;s time to discover other options.&lt;/p&gt;

&lt;h2&gt;the right way&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://karma-runner.github.io/0.12/index.html&quot;&gt;Karma&lt;/a&gt; should ring a bell if you&amp;#39;ve seen &lt;a href=&quot;http://toranbillups.com/&quot;&gt;Toran Billups&amp;#39;&lt;/a&gt; great tutorials about Ember testing. There&amp;#39;s an &lt;a href=&quot;https://github.com/toranb/ember-testing-example&quot;&gt;example repo&lt;/a&gt; that served me well a couple of times, but it&amp;#39;s using Karma without Gulp and QUnit instead of Jasmine.&lt;/p&gt;

&lt;p&gt;Problems were basically gone when I added Karma to the test suite. Since I wanted to accomplish everything from Gulp, I had the feeling that something was wrong with adding a separate task runner only for tests.&lt;/p&gt;

&lt;p&gt;This was stupid, because &lt;a href=&quot;https://github.com/karma-runner/gulp-karma#readme&quot;&gt;gulp-karma&lt;/a&gt; is a thing. It enables you to run Karma from within Gulp.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;All the things considered - I think it&amp;#39;s good to make every task runnable from within one task manager. I&amp;#39;m not sure I&amp;#39;ve chosen the right task manager for that - only thing that&amp;#39;s important is &lt;strong&gt;package.json&lt;/strong&gt; or npm.&lt;/p&gt;

&lt;p&gt;npm is something you&amp;#39;re going to need for almost every JS app there is, so it&amp;#39;s good to think of it as a king of task runners. There&amp;#39;s a good &lt;a href=&quot;http://substack.net/task_automation_with_npm_run&quot;&gt;blog post&lt;/a&gt; about task management with npm which provides more detail and &lt;a href=&quot;http://blog.millermedeiros.com/node-js-protip-avoid-global-test-runners/&quot;&gt;another one&lt;/a&gt; that explains why you should avoid global npm dependencies.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Blogging with Ghost</title>
   <link href="http://shime.github.io/blogging-with-ghost"/>
   <updated>2014-08-17T00:00:00+02:00</updated>
   <id>http://shime.github.io/blogging-with-ghost</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve been switching blog engines a lot lately. Currently I&amp;#39;m using the latest hotness on the block, &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are some observations after trying it out.&lt;/p&gt;

&lt;h2&gt;what is great&lt;/h2&gt;

&lt;p&gt;One of the main selling points of Ghost is definitely a very sexy UI. It comes with a great theme and feels very snappy and clean. I&amp;#39;m currently under impression that blogs need to have that minimalistic feel, have no distractions and be up to the point. This was probably influenced by &lt;a href=&quot;http://mdeiters.svbtle.com/all-our-coderwall-are-belong-to-you&quot;&gt;Svbtle&lt;/a&gt; and &lt;a href=&quot;https://medium.com/editors-picks/how-to-solve-creative-problems-a463ec2c2cb7&quot;&gt;Medium&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s &lt;a href=&quot;https://github.com/TryGhost/Ghost&quot;&gt;open source&lt;/a&gt;, of course, and it&amp;#39;s 100% JavaScript - Node and Ember form a wonderful combination here. Reading its source code will definitely teach you a lot, so go ahead.&lt;/p&gt;

&lt;p&gt;It comes with a snappy Casper theme, which you can see in action on the &lt;a href=&quot;http://john.onolan.org/&quot;&gt;Ghost&amp;#39;s author blog&lt;/a&gt;. I&amp;#39;ve switched from it since I don&amp;#39;t like defaults and I love the look of feel of Medium, so I&amp;#39;m using &lt;a href=&quot;https://github.com/starburst1977/readium&quot;&gt;Readium&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;what could be better&lt;/h2&gt;

&lt;p&gt;Since Ghost is a node application, the authors are expecting you to run it on a server capable of running node. As we all know, hosting costs money and I think it&amp;#39;s not necessary for blog to be an actual web application. Instead, it could just be a collection of static pages and I&amp;#39;ve been using &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github pages&lt;/a&gt; because of that. I&amp;#39;ve used it with every blog engine I&amp;#39;ve tried. They are pretty awesome and completely free.&lt;/p&gt;

&lt;p&gt;There is no official support for this, though, so I&amp;#39;m currently using a &lt;a href=&quot;https://github.com/axitkhurana/buster&quot;&gt;curl hack&lt;/a&gt; as a workaround. It does a fine job, as you can see.&lt;/p&gt;

&lt;p&gt;The fact that blog posts are saved in a database is another thing that&amp;#39;s itching me. I might be biased with this, because of the problem I have with the upper mentioned scenario, but I love using plain old filesystem as a storage for my posts. Markdown is beautiful and completely open, why prefer databases over it? With Markdown on a filesystem, it&amp;#39;s really easy to switch blog engines and since I&amp;#39;m now officially a &lt;em&gt;blog-engine hopper&lt;/em&gt;, I consider it important.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m not going to just rant about it here, this is something I&amp;#39;m planning to change. If that sounds interesting to you, feel free to &lt;a href=&quot;https://twitter.com/shimetweets&quot;&gt;reach me on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Two heads are better than one.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;All in all, I really love Ghost - it&amp;#39;s the best blogging experience I&amp;#39;ve had. Go ahead and try it out, you won&amp;#39;t be disappointed!&lt;/p&gt;

&lt;p&gt;I&amp;#39;m surely sticking with it for some time.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rubyist's view on Node JS</title>
   <link href="http://shime.github.io/rubyists-view-on-nodejs"/>
   <updated>2014-08-15T00:00:00+02:00</updated>
   <id>http://shime.github.io/rubyists-view-on-nodejs</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve been a Ruby developer for some time, but I&amp;#39;m recently getting pulled into the vortex of streams and modules called Node.js.&lt;/p&gt;

&lt;p&gt;I might not come back and if that happens, here are some reasons.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I want programming computers to be like coloring with crayons and playing with duplo blocks.
&lt;br/&gt;
Ryan Dahl - creator of Node.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;404 hype not found&lt;/h2&gt;

&lt;p&gt;There is little to say about this, after these great &lt;a href=&quot;http://gilesbowkett.blogspot.com/2013/02/nodejs-hatred-reveals-significant.html&quot;&gt;blog&lt;/a&gt; &lt;a href=&quot;http://gilesbowkett.blogspot.com/2012/02/rails-went-off-rails-why-im-rebuilding.html&quot;&gt;posts&lt;/a&gt; by Giles Bowkett.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve found that in order to become better programmer, I need to have open mind for things I haven&amp;#39;t tried yet. I need to experiment.&lt;/p&gt;

&lt;p&gt;By having more experiences with weird, unexplored stuff I become better. Hype has a negative connotation for me, so it&amp;#39;s here to prevent me from that - therefore it&amp;#39;s not desirable.&lt;/p&gt;

&lt;p&gt;I try to pretend hype doesn&amp;#39;t exist, as I gain nothing from it.&lt;/p&gt;

&lt;h2&gt;modules all the way down&lt;/h2&gt;

&lt;p&gt;GNU/Linux is an operating system I&amp;#39;ve been using a lot and I really like all &lt;a href=&quot;http://www.faqs.org/docs/artu/ch01s06.html&quot;&gt;the philosophy behind it&lt;/a&gt;. Node was inspired by Unix, but mostly  with these two rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rule of Modularity: Write simple parts connected by clean interfaces.&lt;/li&gt;
&lt;li&gt;Rule of Composition: Design programs to be connected to other programs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ryan Dahl&amp;#39;s quote above is just a playful rephrasing of these rules. That&amp;#39;s basically a Node&amp;#39;s mantra and it&amp;#39;s even more evident if you browse around on &lt;a href=&quot;http://npmjs.org&quot;&gt;npm&lt;/a&gt; a little or when you read the source code of &lt;a href=&quot;https://github.com/maxogden/torrent/blob/master/cli.js&quot;&gt;some libraries&lt;/a&gt; written by prominent Node people. It feels like they use a lot more requires than we do, in the Ruby land.&lt;/p&gt;

&lt;p&gt;The modules are also very minimalistic and they tend to be single-purpose libraries, which leads to this look of dependency graphs, representing the &lt;a href=&quot;http://www.yasiv.com/npm#view/dat&quot;&gt;structure of Node ecosystem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are some attempts to achieve the same in Ruby, of which &lt;a href=&quot;http://microrb.com/&quot;&gt;microrb.com&lt;/a&gt; is the most evident one. It isn&amp;#39;t very popular at the moment, but I&amp;#39;m hoping it will be in the future, as Rails starts getting more competitors like &lt;a href=&quot;https://github.com/lotus/lotus#readme&quot;&gt;Lotus&lt;/a&gt;. Yes, it needs more competitors. Rails currently thinks it&amp;#39;s alone in the kingdom and I would like to see some changes with that.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;large codebases are just failed ecosystems&lt;/p&gt;&amp;mdash; James Halliday (@substack) &lt;a href=&quot;https://twitter.com/substack/statuses/429536060880596992&quot;&gt;February 1, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2&gt;community&lt;/h2&gt;

&lt;p&gt;I&amp;#39;m under impression that Node people are much more relaxed about computers and rules than Ruby people. Maybe I&amp;#39;m exaggerating a bit, but &lt;a href=&quot;https://www.youtube.com/watch?v=giS-aIq0Kaw&quot;&gt;Dominic Tarr&lt;/a&gt; reminds me of &lt;a href=&quot;https://www.youtube.com/watch?v=giS-aIq0Kaw&quot;&gt;Why the lucky stiff&lt;/a&gt;. Maybe it&amp;#39;s just because they&amp;#39;re both disguised, I&amp;#39;m not sure.&lt;/p&gt;

&lt;p&gt;There isn&amp;#39;t much obsession with TDD/BDD/DDD in the Node land and that is a great thing. We are programmers, god dammnit - we shouldn&amp;#39;t be obsessed with things. We should be allowed to break them!&lt;/p&gt;

&lt;p&gt;I&amp;#39;m under impression that there&amp;#39;s a lot less drama around everything here, everything feels more laid back. No one will dramatize if you write a Unix tool like &lt;code&gt;sed&lt;/code&gt; or &lt;code&gt;awk&lt;/code&gt; in Node. Do whatever you want, we don&amp;#39;t care. After being a Rails developer for some time, this feels very refreshing.&lt;/p&gt;

&lt;h2&gt;gems vs modules&lt;/h2&gt;

&lt;p&gt;Since there are a lot of mad scientists in the kingdom of Node, it&amp;#39;s common to stumble upon things with bugs and even unmaintained things. I think this is where Node community needs to learn from Ruby community, where you&amp;#39;ll find so many awesome people dedicated to maintenance of a vastly used gem.&lt;/p&gt;

&lt;p&gt;Node is a cutting edge technology, so playing with it comes with that cost, but there are two faces of that medal. You&amp;#39;ll also develop a skill of module picking over time - something I&amp;#39;ve not experienced that much in Ruby. In Ruby you rarely have to think twice before choosing the right gem for your problem, but here it&amp;#39;s common to see dozens of modules for the same thing. That&amp;#39;s probably because of the tendency for node modules to be much smaller in size than Ruby gems - it&amp;#39;s much easier to provide alternatives.&lt;/p&gt;

&lt;p&gt;Because of all this, you&amp;#39;ll become more intimate with modules you use and you&amp;#39;ll start recognizing authors whose packages are worth a require.&lt;/p&gt;

&lt;h2&gt;node is weird&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s admit it - Ruby is not weird anymore. People don&amp;#39;t do crazy things in it and I&amp;#39;m not sure what&amp;#39;s the reason why. Maybe those conventions and rules influenced our thinking and have put our minds inside the box?&lt;/p&gt;

&lt;p&gt;It kinda feels like Java now, everyone going crazy about OO patterns, code cleanliness and 100% test coverage. Is that the most important thing? When did we forgot how to play?&lt;/p&gt;

&lt;p&gt;Go and make something crazy! Node people &lt;a href=&quot;http://studio.substack.net/r-experiments&quot;&gt;are good at this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is also another side to this medal, of course. I have zero experience with running Node.js in production, but I&amp;#39;m guessing it will be harder than with Rails. That&amp;#39;s okay, I like challenges in things I know nothing about.&lt;/p&gt;

&lt;h2&gt;the future&lt;/h2&gt;

&lt;p&gt;Things that are happening in Node and JavaScript right now are the things that are blowing my mind. I think that&amp;#39;s the biggest reason why I&amp;#39;m attracted to it so much. I think I&amp;#39;ve got a little bored with Ruby since it&amp;#39;s the only language I&amp;#39;ve worked with for years.&lt;/p&gt;

&lt;p&gt;My plan is to stick with something that is blowing my mind - I think that&amp;#39;s the right path to improve myself. It used to be Ruby some while ago - now it changed to Node.&lt;/p&gt;

&lt;p&gt;I know this post is biased and it&amp;#39;s reasonable because I&amp;#39;m excited the most with trying new things. Node is not the silver bullet, but I currently enjoy playing with it. Maybe I&amp;#39;ll change my mind, like with Rails - maybe I won&amp;#39;t.&lt;/p&gt;

&lt;p&gt;At least I&amp;#39;ll be richer for a fun experience.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MicroMachineJS - a minimal state machine for JavaScript</title>
   <link href="http://shime.github.io/micromachinejs-a-minimal-state-machine-for-javascript"/>
   <updated>2014-01-06T00:00:00+01:00</updated>
   <id>http://shime.github.io/micromachinejs-a-minimal-state-machine-for-javascript</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve published a simple JavaScript library the other day. Its goal is to help dealing
with states and it provides a simple API for managing a minimalistic implementation of a state machine.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s &lt;strong&gt;really miniature&lt;/strong&gt;  - it has only 50 lines of code. &lt;a href=&quot;https://github.com/shime/micro-machine-js/blob/master/dist/micro-machine.js&quot;&gt;Its source code&lt;/a&gt; should be easy to read, even to a beginner. I&amp;#39;ve used &lt;a href=&quot;http://pivotal.github.io/jasmine/&quot;&gt;Jasmine&lt;/a&gt; and &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; to TDD it from scratch, so hopefully - the tests should also be &lt;a href=&quot;https://github.com/shime/micro-machine-js/blob/master/spec/all_spec.js&quot;&gt;really expressive&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It has no dependencies and supports everything a state machine should have, nothing more.&lt;/p&gt;

&lt;h3&gt;Installation&lt;/h3&gt;

&lt;p&gt;Give it a go by installing its node package:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install micro-machine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or use it in the browser with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;//rawgithub.com/shime/micro-machine-js/master/dist/micro-machine.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Examples&lt;/h3&gt;

&lt;p&gt;Here&amp;#39;s a walkthrough of its features.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// create a new instance and set its initial state to &amp;quot;pending&amp;quot;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MicroMachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;pending&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// outputs &amp;#39;pending&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// define transitions&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transitionsFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;confirm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pending&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;confirmed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transitionsFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pending&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ignored&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transitionsFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;confirmed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pending&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ignored&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pending&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;confirm&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// outputs &amp;#39;confirmed&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// define callbacks&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;reset&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;resetting...&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;reset&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// resets state and outputs &amp;#39;resetting...&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// define special callback that will be called after any transition&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;any&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;transitioned to &amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// outputs &amp;quot;transitioned to &amp;#39;ignored&amp;#39;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Composition capabilities&lt;/h3&gt;

&lt;p&gt;Adding MicroMachine to your objects is piece of cake - just use composition!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MicroMachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;pending&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transitionsFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;confirm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pending&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;confirmed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transitionsFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;confirmed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pending&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;any&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;confirm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;confirm&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;confirm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// outputs &amp;#39;confirmed&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s all there is to it. Go give it a spin!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>5 reasons for adding a post-installation message to your gem</title>
   <link href="http://shime.github.io/5-reasons-for-adding-a-post-installation-message-to-your-gem"/>
   <updated>2013-11-30T00:00:00+01:00</updated>
   <id>http://shime.github.io/5-reasons-for-adding-a-post-installation-message-to-your-gem</id>
   <content type="html">&lt;p&gt;Wondering whether you should add a post-installation message to your gem? Here&amp;#39;s a list situations
in which doing so is desirable:&lt;/p&gt;

&lt;ul style=&quot;list-style: none&quot;&gt;
  &lt;li&gt;1.&lt;/li&gt;
  &lt;li&gt;2.&lt;/li&gt;
  &lt;li&gt;3.&lt;/li&gt;
  &lt;li&gt;4.&lt;/li&gt;
  &lt;li&gt;5.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No, seriously - &lt;em&gt;don&amp;#39;t do it&lt;/em&gt;!&lt;/p&gt;

&lt;h2&gt;but having fun is important&lt;/h2&gt;

&lt;p&gt;Yes, I know. Maybe this seems a little harsh, we are a Ruby programmers after all. We are fun and interesting,
still kids in our hearts and we are so different from those stuffy statically typed language programmers. They are
those grumpy ones, not having fun at all, doing everything by the book.&lt;/p&gt;

&lt;p&gt;Why can&amp;#39;t we have a little fun, tell people something nice when they&amp;#39;re installing things so that they are reminded
to have fun? After all, you should love what you do - it should still be fun to you.&lt;/p&gt;

&lt;p&gt;Well, yes - please have fun, but please remember that if you&amp;#39;re going to have fun with post-installation messages,
you&amp;#39;re also going to exploit the functionality that was given to you by the community to tell people important
stuff they should be aware off.&lt;/p&gt;

&lt;p&gt;What happens if a gem developer decides to add a post-installation messages with ASCII art, for example? Yes, every
developer out there will be aware of the presence of that gem in her project. It will stand out among other bunch.&lt;/p&gt;

&lt;p&gt;What happens if every gem developer decides to do so? Perhaps &lt;code&gt;STDOUT&lt;/code&gt; overflow would be a right naming for it.&lt;/p&gt;

&lt;h2&gt;workarounds for gems that currently have post-installation messages&lt;/h2&gt;

&lt;p&gt;You can still avoid having any post-installation messages. Bundler has a flag for it&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;bundle install --quiet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although, Linux people (like me) will of course wonder why is that flag even present, when you can just ditch it
to the black hole&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;bundle install &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;dangers of workarounds and conclusion&lt;/h2&gt;

&lt;p&gt;This will of course mean, that you will not see any of the critical warnings that might be present and were added by gem authors that cared enough to add it there.&lt;/p&gt;

&lt;p&gt;Why would anyone put warnings there? Well, when people can&amp;#39;t use anything else (like normal deprecation warnings), they&amp;#39;ll still
fallback to this method.&lt;/p&gt;

&lt;p&gt;An example of this would be when a gem changes its name, like how &lt;code&gt;sqlite3-ruby&lt;/code&gt; did:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Hello! The sqlite3-ruby gem has changed it&amp;#39;s name to just sqlite3.
Rather than installing sqlite3-ruby, you should install sqlite3.
Please update your dependencies accordingly.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Useful, right?&lt;/p&gt;

&lt;p&gt;What about:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;When you HTTParty, you must party hard!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Must you &lt;code&gt;party --hard&lt;/code&gt;? I don&amp;#39;t think so. I didn&amp;#39;t and I&amp;#39;m still here.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Be the change you want to see</title>
   <link href="http://shime.github.io/be-the-change-you-want-to-see"/>
   <updated>2013-10-13T00:00:00+02:00</updated>
   <id>http://shime.github.io/be-the-change-you-want-to-see</id>
   <content type="html">&lt;p&gt;World wide web is such a great medium. Its impact is gaining momentum every single day and I couldn&amp;#39;t be more happy about it. I&amp;#39;m convinced it will replace all other mediums and that it may eventually become a &lt;a href=&quot;http://theratchet.ca/what-is-the-global-brain&quot;&gt;global brain&lt;/a&gt; of sorts. Transparency is probably why I like it the most and I&amp;#39;m under impression that most of the society is not aware how important role transparency plays in our lives.&lt;/p&gt;

&lt;p&gt;Open source is closely related to transparency. I know exactly what I&amp;#39;m using and therefore I can alter it to fit my needs. If I&amp;#39;m interested, I have the opportunity to learn about all of the details, because the details are just hanging around and waiting for my set of eyes.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m writing all of this on an open source operating system, using the open source editor to enter this markdown, which will be spit into the web friendly format by a little help of the open source blog engine, which will in fact get hosted on the open source repo provided to me for free.&lt;/p&gt;

&lt;p&gt;Isn&amp;#39;t that amazing?&lt;/p&gt;

&lt;h2&gt;What are you talking about, I don&amp;#39;t even&lt;/h2&gt;

&lt;p&gt;I mean, there are a lot of projects online involving really clever people who are building stuff that&amp;#39;s changing the world. They are not only helping people to get stuff done, but also sharing their knowledge with everyone who is interested.&lt;/p&gt;

&lt;p&gt;Take &lt;a href=&quot;http://stackoverflow.com&quot;&gt;StackOverflow&lt;/a&gt;, for example. It has been an immense stack of knowledge bits, carefully partitioned into Q/A pairs, waiting to help others with the same problems. I&amp;#39;m infinitely thankful for such a great service and it doesn&amp;#39;t ask for anything in return, other than my optional beans of wisdom. Not only do I feel like a hero when my little beans help someone on the other part of the globe with her problem, but I also get rewarded for it. I get certain reputation points. It amazes me how great concept this is.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://try.discourse.com&quot;&gt;Discourse&lt;/a&gt; is the new cool thing I would like to get involved in. Let&amp;#39;s admit it, the most of the forums today are still stuck in the 90&amp;#39;s. They all look and feel the same, so I&amp;#39;m excited to see Discourse setting the future of forums. I&amp;#39;ve only known about it since I started to learn JavaScript MVC framework, called &lt;a href=&quot;http://emberjs.com&quot;&gt;EmberJS&lt;/a&gt;. Discourse, &lt;a href=&quot;https://github.com/discourse/discourse&quot;&gt;being open source project&lt;/a&gt; has been a great aid for me in the world of Ember, because I can refer to its source code when things get messy. Being able to see how Robin Ward, known as &lt;a href=&quot;http://eviltrout.com&quot;&gt;Evil Trout&lt;/a&gt;, solves Ember problems has taught me a lot. He also posts some great learning stuff on his blog, so if you&amp;#39;re also learning Ember, make sure to check it out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://travis-ci.org&quot;&gt;TravisCI&lt;/a&gt; is another example of a vibrant open source project. I haven&amp;#39;t managed to find time to check its Ember &lt;a href=&quot;https://github.com/travis-ci/travis-web&quot;&gt;source&lt;/a&gt;, but I&amp;#39;m sure I could also learn a lot of interesting stuff.&lt;/p&gt;

&lt;h2&gt;The other side&lt;/h2&gt;

&lt;p&gt;I don&amp;#39;t know about you, but I&amp;#39;m aware of plenty of sites which are exactly the opposite of the aforementioned ones. They&amp;#39;re usually utility sites, aimed to help a certain group of people. More often, than not, they are related to some political institution or they represent a government agency of some sort.&lt;/p&gt;

&lt;p&gt;The most obvious example of shitty websites are the public transportation sites, at least in my experience. I don&amp;#39;t know what&amp;#39;s the experience in other cities or countries, but in Croatia it&amp;#39;s unbearable. People are, kind of, used to the shitty websites when they need some kind of public service on the web. Believe me, they are more than aware that things can be improved a lot, but seeing same pages over and over again for a long period of time has had the effect of minimizing the problem.&lt;/p&gt;

&lt;h2&gt;How you can help&lt;/h2&gt;

&lt;p&gt;If you have any programming experience for the web, you might want to give it a shot and try to build something better. It will not only help others and reward you in eternal glory, but it will also make your life a lot easier!&lt;/p&gt;

&lt;p&gt;Why not help your fellow citizens, if you have the knowledge?&lt;/p&gt;

&lt;p&gt;Imagine learning new interesting language or framework while helping other people at the same time! Building interesting new stuff and solving problems you&amp;#39;ve never experienced before makes you a better programmer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;when you don&amp;#39;t create things, you become defined by your tastes rather than ability. your tastes only narrow &amp;amp; exclude people. so create.&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;_why&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead of ranting about the poor user experience, why not revolutionizing it?&lt;/p&gt;

&lt;p&gt;To wrap it up, don&amp;#39;t expect world to change by itself. &lt;em&gt;Be that change!&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Guard down, Vim and Tmux are here!</title>
   <link href="http://shime.github.io/guard-down-vim-and-tmux-are-here"/>
   <updated>2013-08-11T00:00:00+02:00</updated>
   <id>http://shime.github.io/guard-down-vim-and-tmux-are-here</id>
   <content type="html">&lt;p&gt;Do you practice &lt;a href=&quot;http://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;Test Driven Development&lt;/a&gt;?  If you do, how do you do it?&lt;/p&gt;

&lt;p&gt;Well if your answer is &lt;em&gt;&amp;quot;I do it by using &lt;a href=&quot;https://github.com/sporkrb/spork&quot;&gt;Spork&lt;/a&gt; with &lt;a href=&quot;https://github.com/guard/guard&quot;&gt;Guard&lt;/a&gt;.&amp;quot;&lt;/em&gt;, then you
know that it runs every time you save a file. Same can apply to any other autotesting tool.&lt;/p&gt;

&lt;p&gt;Isn&amp;#39;t that too often?&lt;/p&gt;

&lt;h3&gt;What&amp;#39;s itching me&lt;/h3&gt;

&lt;p&gt;I&amp;#39;m a Vim user and I&amp;#39;m used to saving my files frequently, this keybinding makes it super-easy to do so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot;&amp;quot; saving with ctrl+s&lt;/span&gt;
map &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;S&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; :&lt;span class=&quot;k&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
imap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;S&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So let me explain what do I mean by &amp;quot;&lt;em&gt;too often&lt;/em&gt;&amp;quot;.&lt;/p&gt;

&lt;p&gt;Guard watches for filesystem changes, while Spork preforks your Rails environment to speed up the tests.
If you set up them properly, which sometimes can be a pretty painful process, your tests will run
for each update of the directory being watched. It means that you will spend a lot of time
customizing these two to work well together and end up with a watcher that runs your
test inside a preforked Rails environment (which still takes time to load and it&amp;#39;s still not fast enough for unit tests).
How many times did you save your file to immediately notice a typo?&lt;/p&gt;

&lt;p&gt;There &lt;a href=&quot;http://stefanwienert.net/blog/2013/02/08/faster-rails-tests-with-spring-faster-than-spork-und-easier-to-setup/&quot;&gt;seems&lt;/a&gt; to be a new kid on the block,
but I will not cover it this post. I will focus on my current routine.&lt;/p&gt;

&lt;h3&gt;Current routine&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zsh.org/&quot;&gt;Zsh&lt;/a&gt; is great, &lt;a href=&quot;http://tmux.sourceforge.net/&quot;&gt;Tmux&lt;/a&gt; is great and &lt;a href=&quot;http://www.vim.org/&quot;&gt;Vim&lt;/a&gt; is so
awesome, using it feels like doing evil things. I use them on a daily basis and they&amp;#39;ve proven to be a great trio!
There are a lot of resources about them written by very smart people and you can find links to some of them on the bottom
of the page.&lt;/p&gt;

&lt;p&gt;Currently, I&amp;#39;m using Zsh + Tmux + Vim and some plugins to run only the relevant tests with a few key presses.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how it looks in action:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/unfocused.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;What am I doing here? As you can see, my cursor is positioned inside a Rails model file. I simply hit &lt;code&gt;,s&lt;/code&gt; and specs for this model are being ran in the another Tmux pane.
This functionality is achieved with two great Vim plugins - &lt;a href=&quot;https://github.com/jgdavey/vim-turbux&quot;&gt;Turbux&lt;/a&gt; and &lt;a href=&quot;https://github.com/jgdavey/vim-turbux&quot;&gt;vimux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Turbux is designed to speed up your TDD cycle by using a single key mapping to run the most relevant test based on the
current file in Vim, while vimux is a tool for interacting with tmux from Vim. Turbux depends on unavoidable &lt;a href=&quot;https://github.com/tpope/vim-rails&quot;&gt;rails.vim&lt;/a&gt; to determine
the most relevant test and adds some of its own default mappings.&lt;/p&gt;

&lt;p&gt;These are the default Turbux mappings:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;map &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;SendTestToTmux
map &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;T &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;SendFocusedTestToTmux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The default mappings clashed with my Command-T mappings, so I had to rebind them to &lt;code&gt;&amp;lt;leader&amp;gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot; disable default turbux mappings because they clash with Command-T&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:no_turbux_mappings &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
map &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;SendTestToTmux
map &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;S &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;SendFocusedTestToTmux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you might have guessed, my leader is mapped to comma.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; mapleader&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;                                   &lt;span class=&quot;c&quot;&gt;&amp;quot; map leader to , instead of to slash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Trouble with Zeus&lt;/h2&gt;

&lt;p&gt;On the first attempt, I run my specs by using Zeus and you can see that &lt;code&gt;zeus&lt;/code&gt; is prefixed to &lt;code&gt;rspec&lt;/code&gt; command.
Although Zeus is meant for preforking and therefore speeding up the runtime of your specs, it&amp;#39;s slowing things down in this scenario.&lt;/p&gt;

&lt;p&gt;Why? Well, because I&amp;#39;m testing my models without requiring Rails and I have my business logic decoupled into extensions.
That&amp;#39;s why I have all that &lt;code&gt;include&lt;/code&gt; lines in my model.&lt;/p&gt;

&lt;p&gt;While Zeus is slowing things down here, it certainly speeds up things in all other kinds of tests. I want to be able to turn it off and on inside Vim.&lt;/p&gt;

&lt;p&gt;Helpfile for Turbux suggests this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;Use the following &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; your vimrc &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; common command prefix &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; prepending
&lt;span class=&quot;k&quot;&gt;all&lt;/span&gt; commands:
&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:turbux_command_prefix &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bundle exec&amp;#39;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;quot; default: (empty)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I could set my &lt;code&gt;g:turbux_command_prefix&lt;/code&gt; to &lt;code&gt;zeus&lt;/code&gt;, but that means I would use Zeus all the time. I need something different, like a toggle function for this.
It&amp;#39;s easy to write if you know a little bit of Vimscript:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot; I mostly use zeus to run tests&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; I don&amp;#39;t use it all the time though&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; this function enables toggling when using turbux&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;z :&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; ToggleZeus&lt;span class=&quot;p&quot;&gt;()&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; ToggleZeus&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:turbux_command_prefix &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;zeus&amp;#39;&lt;/span&gt;
    echo &lt;span class=&quot;s1&quot;&gt;&amp;#39;zeus disabled&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:turbux_command_prefix &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    echo &lt;span class=&quot;s1&quot;&gt;&amp;#39;zeus enabled&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:turbux_command_prefix &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;zeus&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it! I can now toggle to run my specs with or without Zeus. :)&lt;/p&gt;

&lt;h2&gt;Focused tests&lt;/h2&gt;

&lt;p&gt;In the end, I just want to show how you can run focused test with Turbux.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/focused.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;p&gt;There are a lot of additional resources on the web and I would definitely recommend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mislav.uniqpath.com/2011/12/vim-revisited/&quot;&gt;Vim: revisited&lt;/a&gt; by Mislav Marohnić&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.drbunsen.org/the-text-triumvirate/&quot;&gt;The Text Triumvirate&lt;/a&gt; by Seth Brown&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://joshuadavey.com/2012/01/10/faster-tdd-feedback-with-tmux-tslime-vim-and-turbux/&quot;&gt;Faster TDD feedback with tmux, tslime.vim and turbux.vim&lt;/a&gt; by Joshua Davey&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Long time no see</title>
   <link href="http://shime.github.io/long-time-no-see"/>
   <updated>2013-06-17T00:00:00+02:00</updated>
   <id>http://shime.github.io/long-time-no-see</id>
   <content type="html">&lt;p&gt;It&amp;#39;s been a while.&lt;/p&gt;

&lt;p&gt;I haven&amp;#39;t blogged for almost a year, so I&amp;#39;ve decided to celebrate this resurrection with a &lt;a href=&quot;https://github.com/shime/shime.github.com/compare/f6ac04ce989c09ac598992e4babe53e9be65c5f7...0460b4ba3&quot;&gt;huge&lt;/a&gt; design update.
Here&amp;#39;s a &lt;a href=&quot;https://dl.dropboxusercontent.com/u/37422201/old_design.png&quot;&gt;picture&lt;/a&gt; of the old design.
I&amp;#39;m really happy with the updates and seeing the change convinces me even more that it was worth it.&lt;/p&gt;

&lt;h3&gt;Design changes&lt;/h3&gt;

&lt;p&gt;As you might have guessed, this site is using &lt;a href=&quot;https://octopress.org&quot;&gt;Octopress&lt;/a&gt; which comes with a pretty default theme.&lt;/p&gt;

&lt;p&gt;The theme is now really minimalistic and a couple of amazing Typekit typefaces had been included. It&amp;#39;s using &lt;a href=&quot;https://typekit.com/fonts/museo-sans&quot;&gt;Museo Sans&lt;/a&gt;
and &lt;a href=&quot;https://typekit.com/fonts/museo-slab&quot;&gt;Museo Slab&lt;/a&gt; which are hopefully really pleasant to your eyes. Another way to check which typefaces are being used is by
clicking the icon in the bottom-right corner.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/&quot;&gt;front page&lt;/a&gt; has also been updated. As you can see in the upper-linked picture of the old design, it used to be pretty default Octopress page, which listed all posts.
&lt;a href=&quot;http://fontawesome.io/&quot;&gt;Font Awesome&lt;/a&gt; helped me in improving that. It&amp;#39;s really an amazing site for icons. Kudos to &lt;a href=&quot;http://twitter.com/byscuits&quot;&gt;Dave Gandy&lt;/a&gt; for doing an amazing job!&lt;/p&gt;

&lt;h3&gt;Other changes&lt;/h3&gt;

&lt;p&gt;What changed in a past year? Nothing much, I&amp;#39;m still freelancing. Not as much as I would love to, considering last couple of months.
I still have to finish my Bachelor&amp;#39;s degree, so trying not to fail started to take a lot of my time. Hopefully it will end in a couple of weeks.&lt;/p&gt;

&lt;p&gt;My love considering programming languages is still Ruby.
I&amp;#39;m being more opened to &lt;a href=&quot;http://clojure.org/&quot;&gt;other&lt;/a&gt; &lt;a href=&quot;http://elixir-lang.org/&quot;&gt;awesome&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/JavaScript&quot;&gt;languages&lt;/a&gt;, though.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m also learning how to build an object-oriented language on top of functional programming with Clojure from a &lt;a href=&quot;https://leanpub.com/fp-oo&quot;&gt;book&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/marick&quot;&gt;Brian Marick&lt;/a&gt;.
It&amp;#39;s worth every penny and you should read it if you&amp;#39;re interested in improving your thinking in a functional paradigm.&lt;/p&gt;

&lt;p&gt;Speaking of books I&amp;#39;ve read, &lt;a href=&quot;http://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X&quot;&gt;The Pragmatic Programmer: From Journeyman to Master&lt;/a&gt; is the one I can not recommend more.
It&amp;#39;s probably one of the best technical books I&amp;#39;ve ever read. I really like the part where the authors are trying to persuade the reader into using a &lt;a href=&quot;http://www.gnu.org/software/emacs/&quot;&gt;fully-customizable&lt;/a&gt; &lt;a href=&quot;http://www.vim.org/&quot;&gt;editor&lt;/a&gt;
over an &lt;a href=&quot;https://netbeans.org/&quot;&gt;IDE&lt;/a&gt;. That&amp;#39;s just one of the gems out of the many you can find inside.&lt;/p&gt;

&lt;p&gt;Yes, there is a Rails-related book I can also recommend. It&amp;#39;s called &lt;a href=&quot;https://rebuilding-rails.com/&quot;&gt;Rebuilding Rails&lt;/a&gt; by Noah Gibbs and you should read it if you&amp;#39;re interested in the concepts of building
a Rails-like framework yourself. It keeps you away from the complexity of newer Rails versions and maintains its focus on teaching you the core of its functionality. It will not
strangle you by explaining every problem the Rails core team faces in their usual day, but it will still teach you how the stuff works behind the curtains. The mantra of this book is - &lt;em&gt;&amp;quot;You&amp;#39;ll learn it better if you do it yourself&amp;quot;&lt;/em&gt;.
If you&amp;#39;d like to know how to write an ORM or how controllers know where the models are hiding, this book is for you.
Oh, did I mention that you can download a free chapter? Go check it out!&lt;/p&gt;

&lt;p&gt;Additionally, I&amp;#39;ve been spending some time improving my rusty &lt;a href=&quot;http://en.wikipedia.org/wiki/C_%28programming_language%29&quot;&gt;C&lt;/a&gt; skills. I&amp;#39;m reading &lt;a href=&quot;http://zedshaw.com/&quot;&gt;Zed Shaw&amp;#39;s&lt;/a&gt; tutorial called &lt;a href=&quot;http://c.learncodethehardway.org/book/&quot;&gt;Learn C the Hard Way&lt;/a&gt;.
I&amp;#39;m enjoying it so far. Here&amp;#39;s how he describes C:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is the Devil, Satan, the trickster Loki come to destroy your productivity with his seductive talk of pointers and direct access to the machine. Then, once this computational Lucifer has you hooked, he destroys your world with the evil &amp;quot;segfault&amp;quot; and laughs as he reveals the trickery in your bargain with him.&lt;/p&gt;

&lt;p&gt;But, C is not to blame for this state of affairs. No my friends, your computer and the Operating System controlling it are the real tricksters. They conspire to hide their true inner workings from you so that you can never really know what is going on. The C programming language&amp;#39;s only failing is giving you access to what is really there, and telling you the cold hard raw truth. C gives you the red pill. C pulls the curtain back to show you the wizard. C is truth.&lt;/p&gt;

&lt;p&gt;&lt;cite&gt; Zed Shaw &lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I like that guy.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I think I&amp;#39;ve advanced in my &lt;a href=&quot;https://github.com/shime/sinatrify&quot;&gt;open&lt;/a&gt; &lt;a href=&quot;https://github.com/shime/rescue_from_ruby&quot;&gt;source&lt;/a&gt; &lt;a href=&quot;https://github.com/shime/uby_interpreter&quot;&gt;work&lt;/a&gt; in the past year and I have definitely learnt a lot of stuff.
Let&amp;#39;s hope I&amp;#39;ll continue to do so. Let&amp;#39;s also hope I&amp;#39;ll update this page more often and let&amp;#39;s not be surprised if we see a post about something unrelated to Ruby every now and then.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Overriding instance method with a module</title>
   <link href="http://shime.github.io/overriding-instance-method-with-a-module"/>
   <updated>2012-08-06T00:00:00+02:00</updated>
   <id>http://shime.github.io/overriding-instance-method-with-a-module</id>
   <content type="html">&lt;p&gt;This is the problem I come across every now and then, so I think a little write up explaining what&amp;#39;s happening could help me understand it better.&lt;/p&gt;

&lt;p&gt;Let me describe the problem:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CanCook&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m baking the &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I don&amp;#39;t know how to bake &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; :(&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CanCook&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tortillas&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; I don&amp;#39;t know how to bake tortillas :(&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Poor Mario doesn&amp;#39;t know how to bake anything. We want to teach him how to bake, to stand out from other programmers!&lt;/p&gt;

&lt;p&gt;The problem is described in the following diagram made by Gavin Kistner:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.stack.imgur.com/40zfE.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;There&amp;#39;s a &lt;a href=&quot;http://stackoverflow.com/a/5944385/726020&quot;&gt;post on StackOverflow&lt;/a&gt; where Gavin presents workarounds for this. I&amp;#39;m going to explain them and add some more:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Subclass Programmer and then include module&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CanCook&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m baking the &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I don&amp;#39;t know how to bake &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; :(&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CulinaryProgrammer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CanCook&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CulinaryProgrammer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tortillas&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; I&amp;#39;m baking the tortillas!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;What&amp;#39;s wrong with this?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This isn&amp;#39;t a real world example, just a simple one that describes this behavior. This would rarely fit you, since you now have to create instances of a new class that will fit your needs. In the real world, you would want instances of the original class to behave like this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extend just the instances you need&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CanCook&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m baking the &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I don&amp;#39;t know how to bake &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; :(&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CanCook&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tortillas&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; I&amp;#39;m baking the tortillas!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;What&amp;#39;s wrong with this?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is better than the previous solution, it skips the part of inheriting the original class, but you still have to extend each instance. What happens with already used instances in your application?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perform a gross hack that removes the original method&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CanCook&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;remove_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bake&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m baking the &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I don&amp;#39;t know how to bake &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; :(&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CanCook&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tortillas&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; I&amp;#39;m baking the tortillas!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;What&amp;#39;s wrong with this?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Just as Gavin describes it in his post, this strategy is invasive.
Your old method will be deleted and you will not going to be able to use it afterwards. This is the best solution so far, even though &lt;em&gt;remove_method&lt;/em&gt; seems dirty.
The good part is that your instances of &lt;em&gt;Programmer&lt;/em&gt; will now know how to bake things automatically. Hooray!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;   No need to use module if using remove_method&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I don&amp;#39;t know how to bake &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; :(&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_real_bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bake&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m baking the &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tortillas&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; I&amp;#39;m baking the tortillas!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;What&amp;#39;s wrong with this?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This post describes modules overriding instance methods, that&amp;#39;s what&amp;#39;s wrong. :) It makes sense to not use the module, though.
The original method is preserved and available for later usage. However, this is not that clean.
Modules are used to describe behavior that can be shared between objects. This removes that flexibility.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the alternative:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CanCook&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;override_bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m baking the &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I don&amp;#39;t know how to bake &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; :(&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CanCook&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:override_bake&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tortillas&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; I&amp;#39;m baking the tortillas!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I like this more since it still preserves the original, but we&amp;#39;re still using a module, even though the methods don&amp;#39;t share the name.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use (prepend) library by John Mair&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;prepend&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CanCook&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m baking the &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I don&amp;#39;t know how to bake &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; :(&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CanCook&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tortillas&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; I&amp;#39;m baking the tortillas!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;What&amp;#39;s wrong with this?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s depending on external library.&lt;/p&gt;

&lt;h2&gt;The ultimate solution of them all&lt;/h2&gt;

&lt;p&gt;These are all the solutions presented in that SO post,
but we haven&amp;#39;t yet found the ultimate one.
Does any of these make you jump around your room screaming how great this code is?
I didn&amp;#39;t think so.&lt;/p&gt;

&lt;p&gt;But behold! This is the solution by &lt;a href=&quot;https://github.com/rkh&quot;&gt;@rkh&lt;/a&gt; which pretty much encapsulates why I love his work.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Prepending&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CanCook&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Prepending&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m baking the &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I don&amp;#39;t know how to bake &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; :(&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CanCook&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tortillas&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; I&amp;#39;m baking the tortillas!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;m going to describe this solution in detail, so if you&amp;#39;re not amazed, this post will not get any more interesting.&lt;/p&gt;

&lt;p&gt;So where to begin?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Any external dependencies? No.&lt;/li&gt;
&lt;li&gt;Are we getting invasive on original method? No.&lt;/li&gt;
&lt;li&gt;Do we have to do something special with the instances we would like to have the method overridden? Not at all.&lt;/li&gt;
&lt;li&gt;Is this code awesome? Hell yeah!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Isn&amp;#39;t this what you first think of when you wish to override instance method with a module?&lt;/p&gt;

&lt;p&gt;Okay, enough with the praising, let&amp;#39;s start explaining!
Our code is nicely organised, but the whole beauty lays in a module named &lt;em&gt;Prepending&lt;/em&gt;. All logic needed to prepend instance methods is located there.&lt;/p&gt;

&lt;p&gt;From ruby documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;append_features(p1)&lt;/p&gt;

&lt;p&gt;When this module is included in another, Ruby calls append_features in
   this module, passing it the receiving module in mod.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Documentation is somewhat confusing. This method will get called even when the module is included in a class, since Class inherits from Module.
In our code it happens when we include CanCook into Programmer on line 24.&lt;/p&gt;

&lt;p&gt;Note that self will refer to CanCook, and base will refer to Programmer class.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Save this module to a variable, so we can use it later.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Extend the Programmer class with anonymous module.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is somewhat more expressive:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Prepending&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;beauty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beauty&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Why are we using anonymous module here?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By defining the module and the method in block, we stay in the same lexical closure, so we can access the local variables.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is wrong with this line of code?&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Prepending&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;beauty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beauty&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;prepend&lt;/em&gt; doesn&amp;#39;t exist in the context of the &lt;em&gt;new&lt;/em&gt; method, since it&amp;#39;s a local variable. We have to define a method dynamically to make it available by preserving original context.&lt;/p&gt;

&lt;p&gt;Okay, let&amp;#39;s explain the code inside this dynamically created method.
It&amp;#39;s called &lt;em&gt;new&lt;/em&gt; and it overrides a Programmer&amp;#39;s constructor, so when &lt;em&gt;Programmer.new&lt;/em&gt; is called, this method will get called instead.&lt;/p&gt;

&lt;p&gt;It calls the original constructor with &lt;em&gt;super&lt;/em&gt;,
which returns a new instance of Programmer and then extends it dynamically with itself (this module, or the module that extends this module).
This enables overriding instance methods.&lt;/p&gt;

&lt;h2&gt;Update&lt;/h2&gt;

&lt;p&gt;Thank you all for discussing this post and sharing your opinions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ryanlecompte&quot;&gt;Ryan LeCompte&lt;/a&gt; has another, more easily understandable solution.
Instead of using an anonymous module, we could simply use &lt;em&gt;define&lt;em&gt;singleton&lt;/em&gt;method&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Prepending&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define_singleton_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CanCook&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Prepending&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m baking the &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I don&amp;#39;t know how to bake &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; :(&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CanCook&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tortillas&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; I&amp;#39;m baking the tortillas!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As Markus explains, we could have extended the instance directly in a constructor.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CanCook&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m baking the &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CanCook&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I don&amp;#39;t know how to bake &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; :(&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Mario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tortillas&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; I&amp;#39;m baking the tortillas!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://twitter.com/hanke&quot;&gt;Florian Hanke&lt;/a&gt; explains that this code doesn&amp;#39;t express its intent very well and I couldn&amp;#39;t agree more with him.
I was very excited when I first saw Konstantin Haase&amp;#39;s technique of achieving this behavior (here is the original &lt;a href=&quot;https://gist.github.com/2720016&quot;&gt;gist&lt;/a&gt;).
I&amp;#39;ve written this post with the intent of describing that interesting technique. I didn&amp;#39;t analyse possible future usages.&lt;/p&gt;

&lt;p&gt;You should also read an &lt;a href=&quot;http://blog.8thlight.com/josh-cheek/2012/02/03/modules-called-they-want-their-integrity-back.html&quot;&gt;interesting post&lt;/a&gt; by Josh Cheek about dangers of using hooks.&lt;/p&gt;

&lt;p&gt;Finally, thanks to &lt;a href=&quot;https://twitter.com/neektza&quot;&gt;Nikica&lt;/a&gt; for a suggestion about lexical context.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Forwardable explained</title>
   <link href="http://shime.github.io/forwardable-explained"/>
   <updated>2012-05-12T00:00:00+02:00</updated>
   <id>http://shime.github.io/forwardable-explained</id>
   <content type="html">&lt;p&gt;There&amp;#39;s a pretty cool module called &lt;a href=&quot;http://www.ruby-doc.org/stdlib-1.9.3/libdoc/forwardable/rdoc/Forwardable.html&quot;&gt;Forwardable&lt;/a&gt; and it&amp;#39;s used for delegation. Let me explain this a little better...&lt;/p&gt;

&lt;p&gt;Delegation is a design pattern in which an object delegates its own method to another object.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why would you ever need that?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;forwardable&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Employers&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Forwardable&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:all&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;def_delegator&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:@all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:size&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;employers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Employers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have declared a new method on our instance variable, so we when we call size on it, it will forward our call to &lt;em&gt;length&lt;/em&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Uninitialized class variable @@current_spec in Minitest</title>
   <link href="http://shime.github.io/uninitialized-class-variable-at-at-current-spec-in-minitest"/>
   <updated>2012-04-30T00:00:00+02:00</updated>
   <id>http://shime.github.io/uninitialized-class-variable-at-at-current-spec-in-minitest</id>
   <content type="html">&lt;p&gt;When using this awesome testing framework, this error was happening to me. Google didn&amp;#39;t help and it was happening because of my stupidity, but I thought I should share a solution and save you a few minutes.&lt;/p&gt;

&lt;p&gt;It was happening because I used to run the tests with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ rspec spec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The case is - you don&amp;#39;t need rspec to run minitests. Just run it like this&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ruby spec/path/to/your/spec.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Using edge Rails locally</title>
   <link href="http://shime.github.io/using-edge-rails-locally"/>
   <updated>2012-04-03T00:00:00+02:00</updated>
   <id>http://shime.github.io/using-edge-rails-locally</id>
   <content type="html">&lt;p&gt;If you ever wanted to test the latest rails version locally, here&amp;#39;s the command which helps you a lot.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ruby /path/to/rails/railties/bin/rails new myapp --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this, you use your local clone of rails/rails to develop new applications.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Insane can't find executable Rails for Rails error</title>
   <link href="http://shime.github.io/insane-cant-find-executable-rails-for-rails-error"/>
   <updated>2012-02-17T00:00:00+01:00</updated>
   <id>http://shime.github.io/insane-cant-find-executable-rails-for-rails-error</id>
   <content type="html">&lt;p&gt;After running any rails command I was getting this error:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/home/hrvoje/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1/rubygems.rb:340:in
`bin_path&amp;#39;: can&amp;#39;t find executable rails for rails-3.2.1 (Gem::Exception)
  from /home/hrvoje/.rvm/gems/ruby-1.9.2-p290/bin/rails:19:in `&amp;lt;main&amp;gt;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Installing latest &lt;em&gt;railties&lt;/em&gt; fixes it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem install railties --pre
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Autotest and RSpec problems</title>
   <link href="http://shime.github.io/autotest-and-rspec2-problems"/>
   <updated>2012-01-29T00:00:00+01:00</updated>
   <id>http://shime.github.io/autotest-and-rspec2-problems</id>
   <content type="html">&lt;p&gt;I was experiencing problems with running specs with autotest. By default it&amp;#39;s configured to run only &lt;em&gt;Test::Unit&lt;/em&gt; files and googling around retrieved several solutions.
Some of them included creating &lt;em&gt;~/.autotest&lt;/em&gt; file which is read before any autotest session. In that file you should add&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Autotest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ran_command&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^lib/.*\.rb$}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;spec/**/*.rb&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This however, didn&amp;#39;t work for me. Running &lt;code&gt;autotest -v&lt;/code&gt; provided verbose output including:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;No tests matched spec/requests/emails_about_cancellation.rb
No tests matched spec/requests/emails_when_owner_schedules.rb
No tests matched spec/helpers/showings_helper_spec.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So basically &lt;em&gt;autotest&lt;/em&gt; was unable to recognize &lt;em&gt;rspec&lt;/em&gt; for some reason.&lt;/p&gt;

&lt;p&gt;After an hour of research I&amp;#39;ve finally found the solution which is as simple as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ autotest -s rspec2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now the &lt;em&gt;autotest&lt;/em&gt; runs my specs and is watching them for changes. Why is this not documented anywhere remains a mystery to me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello world in Sinatra</title>
   <link href="http://shime.github.io/hello-world-in-sinatra"/>
   <updated>2012-01-26T00:00:00+01:00</updated>
   <id>http://shime.github.io/hello-world-in-sinatra</id>
   <content type="html">&lt;p&gt;All you have to do to get a hello world in &lt;a href=&quot;https://github.com/sinatra/sinatra&quot;&gt;Sinatra&lt;/a&gt; is this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem install sinatra
$ ruby -rrubygems -e &amp;quot;require &amp;#39;sinatra&amp;#39;; get(&amp;#39;/&amp;#39;){ &amp;#39;hello world&amp;#39; }&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Take a look at &lt;a href=&quot;http://0.0.0.0:4567/&quot;&gt;0.0.0.0:4567&lt;/a&gt; and you&amp;#39;ll see the results.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Debugging ActiveRecord queries in a Rails console</title>
   <link href="http://shime.github.io/debugging-active-record-queries-in-a-rails-console"/>
   <updated>2012-01-19T00:00:00+01:00</updated>
   <id>http://shime.github.io/debugging-active-record-queries-in-a-rails-console</id>
   <content type="html">&lt;p&gt;I&amp;#39;m going to share a command that comes in very handy when debugging &lt;em&gt;ActiveRecord&lt;/em&gt; queries.
With it you can see the &lt;em&gt;SQL&lt;/em&gt; queries generated by any method.
It&amp;#39;s very useful when debugging your application in a console.&lt;/p&gt;

&lt;p&gt;Here it is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;STDOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Git stash is awesome</title>
   <link href="http://shime.github.io/git-stash-is-awesome"/>
   <updated>2012-01-16T00:00:00+01:00</updated>
   <id>http://shime.github.io/git-stash-is-awesome</id>
   <content type="html">&lt;p&gt;I really like &lt;code&gt;git stash&lt;/code&gt; command. It lets you save your current progress and rollback the head state to the last commit.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say this is my current situation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status

&lt;span class=&quot;c&quot;&gt;# On branch master&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Changes not staged for commit:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# modified:   Gemfile.lock&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# modified:   Rakefile&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# modified:   _config.yml&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Untracked files:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# sass/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# source/&lt;/span&gt;
no changes added to commit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&amp;quot;git add&amp;quot;&lt;/span&gt; and/or &lt;span class=&quot;s2&quot;&gt;&amp;quot;git commit -a&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;#39;re going to save everything into stash.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add .
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git stash save
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status

&lt;span class=&quot;c&quot;&gt;# On branch source&lt;/span&gt;
nothing to commit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;working directory clean&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So it basically cleaned up the working directory.
This comes very handy when you have to fix something on your last commit, but you already made some progress on the other part of your application.
With this command you basically put your changes elsewhere and you&amp;#39;re able to commit that fix.&lt;/p&gt;

&lt;p&gt;After the ordinary &lt;code&gt;git add -A &amp;amp;&amp;amp; git commit &amp;amp;&amp;amp; git push&lt;/code&gt; command flow, you can issue &lt;code&gt;git stash list&lt;/code&gt;. This shows you the current stash status.&lt;/p&gt;

&lt;p&gt;You can have multiple items in your stash, and when you do it&amp;#39;s very handy to mark them with messages like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git stash save &lt;span class=&quot;s2&quot;&gt;&amp;quot;started to work on task 3.2&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So let&amp;#39;s say you got multiple items in your stash:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git stash list

stash@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;: WIP on master: e106412 &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;fix and price display fix
stash@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;: On master: fixing humanized attributes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you execute &lt;code&gt;git stash apply&lt;/code&gt; now, the last added item will be pulled out of the stash and merged with master (stashes really follow LIFO principle).
We can still merge an item named “fixing humanized attributes” like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git stash apply stash@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not the only scenario where stash comes handy. It also does when you wish to switch branches, rollback states, but would like to keep your current changes.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s also nice to clean up your stash regularly so you don&amp;#39;t get lost in too many items. You can do that with &lt;code&gt;git stash clear&lt;/code&gt;, but be careful with it since it doesn&amp;#39;t ask you to confirm your little stashocide.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby! Y U SO BEAUTIFUL?</title>
   <link href="http://shime.github.io/ruby-y-u-so-beautiful"/>
   <updated>2011-11-20T00:00:00+01:00</updated>
   <id>http://shime.github.io/ruby-y-u-so-beautiful</id>
   <content type="html">&lt;p&gt;Ever questioned how to easily prepend &amp;quot;a&amp;quot; or &amp;quot;an&amp;quot; to a word? Here is how
I do it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a_or_an&lt;/span&gt;
   &lt;span class=&quot;sx&quot;&gt;%w(a e i o u)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;an &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;a &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you put this baby in some file inside config/initializers of your
app, you will be able to do this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;carrot&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_or_an&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;a carrot&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_or_an&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;an apple&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yeah I know, it&amp;#39;s awesome! I&amp;#39;ve just thought every instance of class &amp;quot;String&amp;quot; how to do something new.
This is called metaprogramming and this is one of the coolest things I&amp;#39;ve found out about Ruby. However, don&amp;#39;t use my
solution if you have more complex requirements, like support for
acronyms and abbreviations.&lt;/p&gt;
</content>
 </entry>
 

</feed>
